{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from \"axios\";\nimport io from 'socket.io-client';\nconst socket = io.connect(\"http://localhost:3001\");\n\n/*const loginAsync = createAsyncThunk(\r\n    'login/loginAsync',\r\n    async (credentials, thunkAPI) => {\r\n        console.log(credentials)\r\n        //const response = socket.post(\"/users/login\", credentials);\r\n        socket.emit(\"request_login\", credentials);\r\n        let result = false;\r\n        socket.on(\"loginstatus\", (isLoggedIn, pending, errorMessage) => {\r\n        })\r\n        //console.log(response);\r\n\r\n        //console.log(response);\r\n        //const response = await userAPI.fetchById(userId)\r\n        //return response.data\r\n        //return response;\r\n    }\r\n)*/\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState: {\n    isLoggedIn: false,\n    errorMessage: null,\n    isLoading: false,\n    forename: \"null\",\n    surname: \"null\"\n  },\n  reducers: {\n    fullfilled: state => {\n      return state = {\n        isLoggedIn: true,\n        errorMessage: null,\n        isLoading: false,\n        forename: null\n      };\n    },\n    rejected: state => {\n      return state = {\n        isLoggedIn: \"false\",\n        errorMessage: \"Unauthorized\",\n        isLoading: false,\n        forename: null\n      };\n    },\n    setName: (state, action) => {\n      return state = {\n        isLoggedIn: true,\n        errorMessage: null,\n        isLoading: false,\n        forename: action.payload[0],\n        surname: _action.payload[1]\n      };\n    },\n    clearName: state => {\n      return state = {\n        isLoggedIn: false,\n        errorMessage: null,\n        isLoading: false,\n        forename: null,\n        surname: null\n      };\n    }\n  }\n  /*extraReducers: (builder) => {\r\n      builder.addCase(loginAsync.pending, (state, action) => {\r\n          console.log(\"PENDING\")\r\n          return {\r\n              ...state,\r\n              isLoading: true\r\n          }\r\n      })\r\n      builder.addCase(loginAsync.fulfilled, (state, action) => {\r\n          return {\r\n              ...state,\r\n              isLoggedIn: true,\r\n              isLoading: false\r\n          }\r\n      })\r\n      builder.addCase(loginAsync.rejected, (state, action) => {\r\n          return {\r\n              ...state,\r\n              isLoggedIn: false,\r\n              errorMessage: action.payload,\r\n              isLoading: false\r\n          }\r\n      })\r\n  }*/\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  login,\n  fullfilled,\n  rejected,\n  setName,\n  clearName\n} = loginSlice.actions;\n\n//export { loginAsync };\n\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","io","socket","connect","loginSlice","name","initialState","isLoggedIn","errorMessage","isLoading","forename","surname","reducers","fullfilled","state","rejected","setName","action","payload","_action","clearName","login","actions","reducer"],"sources":["C:/Users/Matthias/Downloads/Frontend/my-app/src/features/login/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nimport axios from \"axios\";\r\nimport io from 'socket.io-client'\r\n\r\nconst socket = io.connect(\"http://localhost:3001\"); \r\n\r\n/*const loginAsync = createAsyncThunk(\r\n    'login/loginAsync',\r\n    async (credentials, thunkAPI) => {\r\n        console.log(credentials)\r\n        //const response = socket.post(\"/users/login\", credentials);\r\n        socket.emit(\"request_login\", credentials);\r\n        let result = false;\r\n        socket.on(\"loginstatus\", (isLoggedIn, pending, errorMessage) => {\r\n        })\r\n        //console.log(response);\r\n\r\n        //console.log(response);\r\n        //const response = await userAPI.fetchById(userId)\r\n        //return response.data\r\n        //return response;\r\n    }\r\n)*/\r\n\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'login',\r\n    initialState: {\r\n        isLoggedIn: false,\r\n        errorMessage: null,\r\n        isLoading: false,\r\n        forename: \"null\",\r\n        surname: \"null\"\r\n    },\r\n    reducers: {\r\n        fullfilled: state => {\r\n            return state = {\r\n                isLoggedIn: true,\r\n                errorMessage: null,\r\n                isLoading: false,\r\n                forename: null,\r\n            }\r\n        },\r\n\r\n        rejected: state => {\r\n            return state = {\r\n                isLoggedIn: \"false\",\r\n                errorMessage: \"Unauthorized\",\r\n                isLoading: false,\r\n                forename: null,\r\n            }\r\n        },\r\n        setName: (state, action) => {\r\n            return state = {\r\n                isLoggedIn: true,\r\n                errorMessage: null,\r\n                isLoading: false,\r\n                forename: action.payload[0],\r\n                surname: _action.payload[1]\r\n            }\r\n        },\r\n        clearName: (state) => {\r\n            return state = {\r\n                isLoggedIn: false,\r\n                errorMessage: null,\r\n                isLoading: false,\r\n                forename: null,\r\n                surname: null\r\n            }\r\n        }\r\n    },\r\n    /*extraReducers: (builder) => {\r\n        builder.addCase(loginAsync.pending, (state, action) => {\r\n            console.log(\"PENDING\")\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        })\r\n        builder.addCase(loginAsync.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                isLoading: false\r\n            }\r\n        })\r\n        builder.addCase(loginAsync.rejected, (state, action) => {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                errorMessage: action.payload,\r\n                isLoading: false\r\n            }\r\n        })\r\n    }*/\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { login, fullfilled, rejected, setName, clearName } = loginSlice.actions\r\n\r\n//export { loginAsync };\r\n\r\nexport default loginSlice.reducer"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;EAClCM,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACVC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE,KAAK;IAChBC,QAAQ,EAAE,MAAM;IAChBC,OAAO,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAU,EAAEC,KAAK,IAAI;MACjB,OAAOA,KAAK,GAAG;QACXP,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE;MACd,CAAC;IACL,CAAC;IAEDK,QAAQ,EAAED,KAAK,IAAI;MACf,OAAOA,KAAK,GAAG;QACXP,UAAU,EAAE,OAAO;QACnBC,YAAY,EAAE,cAAc;QAC5BC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE;MACd,CAAC;IACL,CAAC;IACDM,OAAO,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MACxB,OAAOH,KAAK,GAAG;QACXP,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAEO,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;QAC3BP,OAAO,EAAEQ,OAAO,CAACD,OAAO,CAAC,CAAC;MAC9B,CAAC;IACL,CAAC;IACDE,SAAS,EAAGN,KAAK,IAAK;MAClB,OAAOA,KAAK,GAAG;QACXP,UAAU,EAAE,KAAK;QACjBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC;IACL;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEU,KAAK;EAAER,UAAU;EAAEE,QAAQ;EAAEC,OAAO;EAAEI;AAAU,CAAC,GAAGhB,UAAU,CAACkB,OAAO;;AAErF;;AAEA,eAAelB,UAAU,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}