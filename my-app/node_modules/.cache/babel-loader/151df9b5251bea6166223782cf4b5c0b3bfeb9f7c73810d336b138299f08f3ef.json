{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from \"axios\";\nimport io from 'socket.io-client';\nconst socket = io.connect(\"http://localhost:3001\");\nconst loginAsync = createAsyncThunk('login/loginAsync', async (credentials, thunkAPI) => {\n  console.log(credentials);\n  //const response = socket.post(\"/users/login\", credentials);\n  socket.emit(\"request_login\", credentials);\n  let result = false;\n  /*socket.on(\"loginstatus\", (isLoggedIn, pending, errorMessage) => {\r\n  })*/\n  //console.log(response);\n\n  //console.log(response);\n  //const response = await userAPI.fetchById(userId)\n  //return response.data\n  //return response;\n});\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState: {\n    isLoggedIn: false,\n    errorMessage: null,\n    isLoading: false\n  },\n  reducers: {\n    fullfilled: state => {\n      state.isLoggedIn = true;\n      state.errorMessage = null;\n      state.isLoading = false;\n    },\n    rejected: state => {\n      state.isLoggedIn = false;\n      state.errorMessage = \"Wrong username or password\";\n      state.isLoading = false;\n    }\n  }\n  /*extraReducers: (builder) => {\r\n      builder.addCase(loginAsync.pending, (state, action) => {\r\n          console.log(\"PENDING\")\r\n          return {\r\n              ...state,\r\n              isLoading: true\r\n          }\r\n      })\r\n      builder.addCase(loginAsync.fulfilled, (state, action) => {\r\n          return {\r\n              ...state,\r\n              isLoggedIn: true,\r\n              isLoading: false\r\n          }\r\n      })\r\n      builder.addCase(loginAsync.rejected, (state, action) => {\r\n          return {\r\n              ...state,\r\n              isLoggedIn: false,\r\n              errorMessage: action.payload,\r\n              isLoading: false\r\n          }\r\n      })\r\n  }*/\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  login,\n  fullfilled,\n  rejected\n} = loginSlice.actions;\nexport { loginAsync };\nexport const errMessage = state => state.errorMessage.value;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","io","socket","connect","loginAsync","credentials","thunkAPI","console","log","emit","result","loginSlice","name","initialState","isLoggedIn","errorMessage","isLoading","reducers","fullfilled","state","rejected","login","actions","errMessage","value","reducer"],"sources":["C:/Users/Matthias/Downloads/Frontend/my-app/src/features/login/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nimport axios from \"axios\";\r\nimport io from 'socket.io-client'\r\n\r\nconst socket = io.connect(\"http://localhost:3001\"); \r\n\r\nconst loginAsync = createAsyncThunk(\r\n    'login/loginAsync',\r\n    async (credentials, thunkAPI) => {\r\n        console.log(credentials)\r\n        //const response = socket.post(\"/users/login\", credentials);\r\n        socket.emit(\"request_login\", credentials);\r\n        let result = false;\r\n        /*socket.on(\"loginstatus\", (isLoggedIn, pending, errorMessage) => {\r\n        })*/\r\n        //console.log(response);\r\n\r\n        //console.log(response);\r\n        //const response = await userAPI.fetchById(userId)\r\n        //return response.data\r\n        //return response;\r\n    }\r\n)\r\n\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'login',\r\n    initialState: {\r\n        isLoggedIn: false,\r\n        errorMessage: null,\r\n        isLoading: false\r\n    },\r\n    reducers: {\r\n        fullfilled: state => {\r\n            state.isLoggedIn = true;\r\n            state.errorMessage = null;\r\n            state.isLoading = false\r\n        },\r\n\r\n        rejected: state => {\r\n            state.isLoggedIn = false;\r\n            state.errorMessage = \"Wrong username or password\";\r\n            state.isLoading = false\r\n        }\r\n    },\r\n    /*extraReducers: (builder) => {\r\n        builder.addCase(loginAsync.pending, (state, action) => {\r\n            console.log(\"PENDING\")\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        })\r\n        builder.addCase(loginAsync.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                isLoading: false\r\n            }\r\n        })\r\n        builder.addCase(loginAsync.rejected, (state, action) => {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                errorMessage: action.payload,\r\n                isLoading: false\r\n            }\r\n        })\r\n    }*/\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { login, fullfilled, rejected } = loginSlice.actions\r\n\r\nexport { loginAsync };\r\n\r\nexport const errMessage = (state) => state.errorMessage.value\r\n\r\nexport default loginSlice.reducer"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAO,CAAC,uBAAuB,CAAC;AAElD,MAAMC,UAAU,GAAGN,gBAAgB,CAC/B,kBAAkB,EAClB,OAAOO,WAAW,EAAEC,QAAQ,KAAK;EAC7BC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;EACxB;EACAH,MAAM,CAACO,IAAI,CAAC,eAAe,EAAEJ,WAAW,CAAC;EACzC,IAAIK,MAAM,GAAG,KAAK;EAClB;AACR;EACQ;;EAEA;EACA;EACA;EACA;AACJ,CAAC,CACJ;;AAGD,OAAO,MAAMC,UAAU,GAAGZ,WAAW,CAAC;EAClCa,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACVC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAU,EAAEC,KAAK,IAAI;MACjBA,KAAK,CAACL,UAAU,GAAG,IAAI;MACvBK,KAAK,CAACJ,YAAY,GAAG,IAAI;MACzBI,KAAK,CAACH,SAAS,GAAG,KAAK;IAC3B,CAAC;IAEDI,QAAQ,EAAED,KAAK,IAAI;MACfA,KAAK,CAACL,UAAU,GAAG,KAAK;MACxBK,KAAK,CAACJ,YAAY,GAAG,4BAA4B;MACjDI,KAAK,CAACH,SAAS,GAAG,KAAK;IAC3B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEK,KAAK;EAAEH,UAAU;EAAEE;AAAS,CAAC,GAAGT,UAAU,CAACW,OAAO;AAEjE,SAASlB,UAAU;AAEnB,OAAO,MAAMmB,UAAU,GAAIJ,KAAK,IAAKA,KAAK,CAACJ,YAAY,CAACS,KAAK;AAE7D,eAAeb,UAAU,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}