{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from \"axios\";\nimport io from 'socket.io-client';\nconst socket = io.connect(\"http://localhost:3001\");\n\n/*const loginAsync = createAsyncThunk(\r\n    'login/loginAsync',\r\n    async (credentials, thunkAPI) => {\r\n        console.log(credentials)\r\n        //const response = socket.post(\"/users/login\", credentials);\r\n        socket.emit(\"request_login\", credentials);\r\n        let result = false;\r\n        socket.on(\"loginstatus\", (isLoggedIn, pending, errorMessage) => {\r\n        })\r\n        //console.log(response);\r\n\r\n        //console.log(response);\r\n        //const response = await userAPI.fetchById(userId)\r\n        //return response.data\r\n        //return response;\r\n    }\r\n)*/\nlet data = {\n  isLoggedIn: false,\n  errorMessage: null,\n  isLoading: false,\n  forename: \"null\",\n  surname: \"null\"\n};\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState: {\n    value: data\n  },\n  reducers: {\n    /*fullfilled: state => {\r\n            state.value.isLoggedIn = \r\n    },*/\n\n    rejected: state => {\n      /*state.value.isLoggedIn =  \"false\",\r\n      state.value.errorMessage =  \"Unauthorized\",\r\n      state.value.isLoading =  false*/\n    },\n    fullfilled: (state, action, action2) => {\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: \"test\",\n        isLoading: false,\n        forename: action.payload,\n        surname: action2.payload\n      };\n      /*state.value.isLoggedIn = true,\r\n      state.value.errorMessage = \"test\",\r\n      state.value.isLoading = false,\r\n      state.value.forename = action.payload*/\n    },\n\n    clearName: state => {\n      /*state.value.isLoggedIn = false,\r\n      state.value.errorMessage = null,\r\n      state.value.isLoading = false,\r\n      state.value.forename = null*/\n    }\n  }\n  /*extraReducers: (builder) => {\r\n      builder.addCase(loginAsync.pending, (state, action) => {\r\n          console.log(\"PENDING\")\r\n          return {\r\n              ...state,\r\n              isLoading: true\r\n          }\r\n      })\r\n      builder.addCase(loginAsync.fulfilled, (state, action) => {\r\n          return {\r\n              ...state,\r\n              isLoggedIn: true,\r\n              isLoading: false\r\n          }\r\n      })\r\n      builder.addCase(loginAsync.rejected, (state, action) => {\r\n          return {\r\n              ...state,\r\n              isLoggedIn: false,\r\n              errorMessage: action.payload,\r\n              isLoading: false\r\n          }\r\n      })\r\n  }*/\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  fullfilled,\n  rejected,\n  clearName\n} = loginSlice.actions;\n\n//export { loginAsync };\n\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","io","socket","connect","data","isLoggedIn","errorMessage","isLoading","forename","surname","loginSlice","name","initialState","value","reducers","rejected","state","fullfilled","action","action2","payload","clearName","actions","reducer"],"sources":["C:/Users/Matthias/Downloads/Frontend/my-app/src/features/login/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nimport axios from \"axios\";\r\nimport io from 'socket.io-client'\r\n\r\nconst socket = io.connect(\"http://localhost:3001\"); \r\n\r\n/*const loginAsync = createAsyncThunk(\r\n    'login/loginAsync',\r\n    async (credentials, thunkAPI) => {\r\n        console.log(credentials)\r\n        //const response = socket.post(\"/users/login\", credentials);\r\n        socket.emit(\"request_login\", credentials);\r\n        let result = false;\r\n        socket.on(\"loginstatus\", (isLoggedIn, pending, errorMessage) => {\r\n        })\r\n        //console.log(response);\r\n\r\n        //console.log(response);\r\n        //const response = await userAPI.fetchById(userId)\r\n        //return response.data\r\n        //return response;\r\n    }\r\n)*/\r\nlet data = {     \r\n    isLoggedIn: false,\r\n    errorMessage: null,\r\n    isLoading: false,\r\n    forename: \"null\",\r\n    surname: \"null\"}\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'login',\r\n    initialState: {\r\n        value: data\r\n    },\r\n    reducers: {\r\n        /*fullfilled: state => {\r\n                state.value.isLoggedIn = \r\n        },*/\r\n\r\n        rejected: state => {\r\n                /*state.value.isLoggedIn =  \"false\",\r\n                state.value.errorMessage =  \"Unauthorized\",\r\n                state.value.isLoading =  false*/\r\n        },\r\n        fullfilled: (state, action, action2) => {\r\n                return{\r\n                    ...state,\r\n                    isLoading: true,\r\n                    errorMessage: \"test\",\r\n                    isLoading: false,\r\n                    forename: action.payload,\r\n                    surname: action2.payload\r\n                }\r\n                /*state.value.isLoggedIn = true,\r\n                state.value.errorMessage = \"test\",\r\n                state.value.isLoading = false,\r\n                state.value.forename = action.payload*/\r\n        },\r\n        clearName: (state) => {\r\n            /*state.value.isLoggedIn = false,\r\n            state.value.errorMessage = null,\r\n            state.value.isLoading = false,\r\n            state.value.forename = null*/\r\n        }\r\n    },\r\n    /*extraReducers: (builder) => {\r\n        builder.addCase(loginAsync.pending, (state, action) => {\r\n            console.log(\"PENDING\")\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        })\r\n        builder.addCase(loginAsync.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                isLoading: false\r\n            }\r\n        })\r\n        builder.addCase(loginAsync.rejected, (state, action) => {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                errorMessage: action.payload,\r\n                isLoading: false\r\n            }\r\n        })\r\n    }*/\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { fullfilled, rejected, clearName } = loginSlice.actions\r\n\r\n//export { loginAsync };\r\n\r\nexport default loginSlice.reducer"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG;EACPC,UAAU,EAAE,KAAK;EACjBC,YAAY,EAAE,IAAI;EAClBC,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,MAAM;EAChBC,OAAO,EAAE;AAAM,CAAC;AAEpB,OAAO,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAClCY,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACVC,KAAK,EAAET;EACX,CAAC;EACDU,QAAQ,EAAE;IACN;AACR;AACA;;IAEQC,QAAQ,EAAEC,KAAK,IAAI;MACX;AAChB;AACA;IAFgB,CAGP;IACDC,UAAU,EAAE,CAACD,KAAK,EAAEE,MAAM,EAAEC,OAAO,KAAK;MAChC,OAAM;QACF,GAAGH,KAAK;QACRT,SAAS,EAAE,IAAI;QACfD,YAAY,EAAE,MAAM;QACpBC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAEU,MAAM,CAACE,OAAO;QACxBX,OAAO,EAAEU,OAAO,CAACC;MACrB,CAAC;MACD;AAChB;AACA;AACA;IACQ,CAAC;;IACDC,SAAS,EAAGL,KAAK,IAAK;MAClB;AACZ;AACA;AACA;IAHY;EAKR;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEC,UAAU;EAAEF,QAAQ;EAAEM;AAAU,CAAC,GAAGX,UAAU,CAACY,OAAO;;AAErE;;AAEA,eAAeZ,UAAU,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}